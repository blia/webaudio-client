{"version":3,"sources":["index.js"],"names":["MicrophoneSample","socket","ws","WIDTH","HEIGHT","canvas","document","querySelector","getMicrophoneInput","then","_","console","log","context","window","AudioContext","webkitAudioContext","prototype","isLocalhost","location","hostname","navigator","protocol","alert","mediaDevices","getUserMedia","audio","onStream","bind","onStreamError","stream","input","createMediaStreamSource","filter","createBiquadFilter","frequency","value","type","Q","analyser","createAnalyser","connect","requestAnimationFrame","visualize","e","error","width","height","drawContext","getContext","times","Uint8Array","frequencyBinCount","getByteTimeDomainData","reduce","acc","v","i","length","percent","offset","barWidth","fillStyle","fillRect","wsButton","micButton","onclick","onerror","onopen","onclose","close","WebSocket","host"],"mappings":";AAsBA,SAASA,IACFC,KAAAA,OAASC,EACTC,KAAAA,MAAQ,IACRC,KAAAA,OAAS,IACTC,KAAAA,OAASC,SAASC,cAAc,UAChCC,KAAAA,qBAAqBC,KAAKC,IAC7BC,QAAQC,IAAI,mBAVhBC,QAAU,IAAKC,OAAOC,cAAgBD,OAAOE,oBAe7ChB,EAAiBiB,UAAUT,mBAAqB,WAE1CU,IAAAA,EAA0C,aAA5BJ,OAAOK,SAASC,UACF,aAA5BN,OAAOK,SAASC,SAIbC,MAHyB,UAA5BP,OAAOK,SAASG,UAAyBJ,GAC3CK,MAAM,sFAEDF,UAAUG,aAAaC,aAAa,CAACC,OAAO,IAAOjB,KAClC,KAAKkB,SAASC,KAAK,MACnB,KAAKC,cAAcD,KAAK,QAGlD5B,EAAiBiB,UAAUU,SAAW,SAASG,GACzCC,IAAAA,EAAQlB,QAAQmB,wBAAwBF,GACxCG,EAASpB,QAAQqB,qBACrBD,EAAOE,UAAUC,MAAQ,GACzBH,EAAOI,KAAO,QACdJ,EAAOK,EAAI,GAEPC,IAAAA,EAAW1B,QAAQ2B,iBAGvBT,EAAMU,QAAQR,GACdA,EAAOQ,QAAQF,GAEVA,KAAAA,SAAWA,EAEhBzB,OAAO4B,sBAAsB,KAAKC,UAAUf,KAAK,QAGnD5B,EAAiBiB,UAAUY,cAAgB,SAASe,GAClDjC,QAAQkC,MAAM,2BAA4BD,IAG5C5C,EAAiBiB,UAAU0B,UAAY,WAChCtC,KAAAA,OAAOyC,MAAQ,KAAK3C,MACpBE,KAAAA,OAAO0C,OAAS,KAAK3C,OACtB4C,IAAAA,EAAc,KAAK3C,OAAO4C,WAAW,MAErCC,EAAQ,IAAIC,WAAW,KAAKZ,SAASa,mBACpCb,KAAAA,SAASc,sBAAsBH,GAEpCvC,QAAQC,IAAI,IAAMsC,EAAMI,OAAO,CAACC,EAAKC,IAAMD,EAAMC,EAAIA,EAAID,EAAK,MAEzD,IAAA,IAAIE,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAAK,CACjCrB,IACAuB,EADQT,EAAMO,GACI,IAClBV,EAAS,KAAK3C,OAASuD,EACvBC,EAAS,KAAKxD,OAAS2C,EAAS,EAChCc,EAAW,KAAK1D,MAAM+C,EAAMQ,OAChCV,EAAYc,UAAY,QACxBd,EAAYe,SAASN,EAAII,EAAUD,EAAQ,EAAG,GAEhD9C,OAAO4B,sBAAsB,KAAKC,UAAUf,KAAK,QAGnD,MAAMoC,EAAW1D,SAASC,cAAc,aAClC0D,EAAY3D,SAASC,cAAc,cAEzC,IAAIL,EAEJ8D,EAASE,QAAU,MACbhE,IACFA,EAAGiE,QAAUjE,EAAGkE,OAASlE,EAAGmE,QAAU,KACtCnE,EAAGoE,SAELpE,EAAK,IAAIqE,mBAAmBpD,SAASqD,UAGvCP,EAAUC,QAAU,MACL,IAAIlE","file":"webaudio.592d381f.map","sourceRoot":"..","sourcesContent":["/*\n * Copyright 2013 Boris Smus. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n // Start off by initializing a new context.\ncontext = new (window.AudioContext || window.webkitAudioContext)();\n\n\n\nfunction MicrophoneSample() {\n  this.socket = ws;\n  this.WIDTH = 640;\n  this.HEIGHT = 480;\n  this.canvas = document.querySelector('canvas');\n  this.getMicrophoneInput().then(_ => {\n    console.log('mic connected');\n  })\n\n}\n\nMicrophoneSample.prototype.getMicrophoneInput = function() {\n  // TODO(smus): Remove this ugliness.\n  var isLocalhost = window.location.hostname == 'localhost' ||\n      window.location.hostname == '127.0.0.1';\n  if (window.location.protocol != 'https:' && !isLocalhost) {\n    alert('HTTPS is required for microphone access, and this site has no SSL cert yet. Sorry!');\n  }\n  return navigator.mediaDevices.getUserMedia({audio: true}).then(\n                          this.onStream.bind(this),\n                          this.onStreamError.bind(this));\n};\n\nMicrophoneSample.prototype.onStream = function(stream) {\n  var input = context.createMediaStreamSource(stream);\n  var filter = context.createBiquadFilter();\n  filter.frequency.value = 60.0;\n  filter.type = 'notch';\n  filter.Q = 10.0;\n\n  var analyser = context.createAnalyser();\n\n  // Connect graph.\n  input.connect(filter);\n  filter.connect(analyser);\n\n  this.analyser = analyser;\n  // Setup a timer to visualize some stuff.\n  window.requestAnimationFrame(this.visualize.bind(this));\n};\n\nMicrophoneSample.prototype.onStreamError = function(e) {\n  console.error('Error getting microphone', e);\n};\n\nMicrophoneSample.prototype.visualize = function() {\n  this.canvas.width = this.WIDTH;\n  this.canvas.height = this.HEIGHT;\n  var drawContext = this.canvas.getContext('2d');\n\n  var times = new Uint8Array(this.analyser.frequencyBinCount);\n  this.analyser.getByteTimeDomainData(times);\n  // this.socket.send(128 - times.reduce((acc, v) => acc > v ? v : acc, 255));\n  console.log(128 - times.reduce((acc, v) => acc > v ? v : acc, 255));\n  // console.log(times);\n  for (var i = 0; i < times.length; i++) {\n    var value = times[i];\n    var percent = value / 256;\n    var height = this.HEIGHT * percent;\n    var offset = this.HEIGHT - height - 1;\n    var barWidth = this.WIDTH/times.length;\n    drawContext.fillStyle = 'black';\n    drawContext.fillRect(i * barWidth, offset, 1, 1);\n  }\n  window.requestAnimationFrame(this.visualize.bind(this));\n};\n\nconst wsButton = document.querySelector('#wsButton');\nconst micButton = document.querySelector('#micButton');\n\nlet ws;\n\nwsButton.onclick = () => {\n  if (ws) {\n    ws.onerror = ws.onopen = ws.onclose = null;\n    ws.close();\n  }\n  ws = new WebSocket(`wss://${location.host}`);\n}\n\nmicButton.onclick = () => {\n  var sample = new MicrophoneSample();\n}\n"]}